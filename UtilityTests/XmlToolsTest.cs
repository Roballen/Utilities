// The following code was generated by Microsoft Visual Studio 2005.
// The test owner should check each test for validity.
using System.Collections;
using System.Collections.ObjectModel;
using System.Xml;
using Utilities;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace UtilitiesTests
{
    /// <summary>
    ///This is a test class for Utilities.XmlTools and is intended
    ///to contain all Utilities.XmlTools Unit Tests
    ///</summary>
    [TestClass()]
    public class XmlToolsTest
    {
        private TestContext testContextInstance;

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }
        #region Additional test attributes
        // 
        //You can use the following additional attributes as you write your tests:
        //
        //Use ClassInitialize to run code before running the first test in the class
        //
        //[ClassInitialize()]
        //public static void MyClassInitialize(TestContext testContext)
        //{
        //}
        //
        //Use ClassCleanup to run code after all tests in a class have run
        //
        //[ClassCleanup()]
        //public static void MyClassCleanup()
        //{
        //}
        //
        //Use TestInitialize to run code before running each test
        //
        //[TestInitialize()]
        //public void MyTestInitialize()
        //{
        //}
        //
        //Use TestCleanup to run code after each test has run
        //
        //[TestCleanup()]
        //public void MyTestCleanup()
        //{
        //}
        //
        #endregion


        /// <summary>
        ///A test for Clone (object)
        ///</summary>
        [TestMethod()]
        public void CloneTest()
        {
            object obj = "ABC"; 
            object expected = "ABC";
            object actual = XmlTools.Clone(obj);
            string cMsg = "Utilities.XmlTools.Clone did not return the expected value.";
            Assert.AreEqual(expected, actual, cMsg);
        }

        /// <summary>
        ///A test for CompareXML (string, string, ArrayList, ref ArrayList)
        ///</summary>
        [TestMethod()]
        public void CompareXmlTest()
        {
            XmlTools target = new XmlTools();
            string cMasterXml = "<test><node1>x</node1></test>"; 
            string cNewXml = "<test><node1>x</node1></test>"; 
            ArrayList aFix = new ArrayList(); 
            bool expected = true;
            bool actual;
            actual = target.CompareXml(cMasterXml, cNewXml, aFix);
            Assert.AreEqual(expected, actual, "Utilities.XmlTools.CompareXML did not return the expected value.");
        }

        /// <summary>
        ///A test for CompareXML (string, string, List&lt;string&gt;, ref List&lt;string&gt;)
        ///</summary>
        [TestMethod()]
        public void CompareXmlTest1()
        {
            XmlTools target = new XmlTools();
            string cMasterXml = "<test><node1>x</node1></test>";
            string cNewXml = "<test><node1>x</node1></test>"; 
            Collection<string> aFix = new Collection<string>(); 
            bool expected = true;
            bool actual;
            actual = target.CompareXml(cMasterXml, cNewXml, aFix);
            Assert.AreEqual(expected, actual, "Utilities.XmlTools.CompareXML did not return the expected value.");
        }

        /// <summary>
        ///A test for Deserialize (byte[])
        ///</summary>
        [TestMethod(), Ignore]
        public void DeserializeTest()
        {
            byte[] obj = new byte[3];; 
            object expected = new object();
            object actual = XmlTools.Deserialize(obj);
            string cMsg = "Utilities.XmlTools.Deserialize did not return the expected value.";
            Assert.AreEqual(expected, actual, cMsg);
        }

        /// <summary>
        ///A test for FixPackageXML (string, string)
        ///</summary>
        [TestMethod(), Ignore]
        public void FixPackageXmlTest()
        {
            string cFileIn = " "; 
            string cFileOut = " "; 
            XmlTools.FixPackageXml(cFileIn, cFileOut);
        }

        /// <summary>
        ///A test for FixXML (ArrayList, ArrayList)
        ///</summary>
        [TestMethod(), Ignore]
        public void FixXmlTest()
        {
            //XmlTools target = new XmlTools();
            //ArrayList aXml = new ArrayList(); 
            //ArrayList aTags = new ArrayList(); 
            //ArrayList expected = new ArrayList();
            //ArrayList actual = XmlTools.FixXml(aXml, aTags);
            //string cMsg = "Utilities.XmlTools.FixXML did not return the expected value.";
            //Assert.AreEqual(expected, actual, cMsg);
        }

        /// <summary>
        ///A test for FixXML (string)
        ///</summary>
        [TestMethod(), Ignore]
        public void FixXmlTest1()
        {
            string cXML = " "; 
            string expected = " ";
            string actual = XmlTools.FixXml(cXML);
            Assert.AreEqual(expected, actual, "Utilities.XmlTools.FixXML did not return the expected value.");
        }

        /// <summary>
        ///A test for FixXMLList (List&lt;string&gt;, List&lt;string&gt;)
        ///</summary>
        [TestMethod(), Ignore]
        public void FixXmlListTest()
        {
            //XmlTools target = new XmlTools();
            //Collection<string> aXml = new Collection<string>(); 
            //Collection<string> aTags = new Collection<string>(); 
            //Collection<string> expected = new Collection<string>();
            //Collection<string> actual = target.FixXmlList(aXml, aTags);
            //Assert.AreEqual(expected, actual, "Utilities.XmlTools.FixXMLList did not return the expected value.");
        }

        /// <summary>
        ///A test for ListToString (List&lt;string&gt;, bool)
        ///</summary>
        [DeploymentItem("Utilities.dll")]
        [TestMethod(), Ignore]
        public void ListToStringTest()
        {
            XmlTools target = new XmlTools();
            XmlTools_Accessor accessor = new XmlTools_Accessor();
            Collection<string> a = null; 
            bool bIncludeCarriageReturns = false; 
            string expected = " ";
            string actual = XmlTools_Accessor.CollectionToString(a, bIncludeCarriageReturns);
            Assert.AreEqual(expected, actual, "Utilities.XmlTools.ListToString did not return the expected value.");
        }

        /// <summary>
        ///A test for ParseCleanXML (string)
        ///</summary>
        [TestMethod(), Ignore]
        public void ParseCleanXmlTest()
        {
            //XmlTools target = new XmlTools();
            //string cIn = " "; 
            //string expected = " ";
            //string actual = target.ParseCleanXml(cIn);
            //Assert.AreEqual(expected, actual, "Utilities.XmlTools.ParseCleanXML did not return the expected value.");
        }

        /// <summary>
        ///A test for RefNumToFile (string)
        ///</summary>
        [TestMethod(), Ignore]
        public void RefNumToFileTest()
        {
            string referenceNumber = " "; 
            string expected = " ";
            string actual = XmlTools.RefNumToFile(referenceNumber);
            Assert.AreEqual(expected, actual, "Utilities.XmlTools.RefNumToFile did not return the expected value.");
        }

        /// <summary>
        ///A test for RefNumToFileName (string)
        ///</summary>
        [TestMethod()]
        public void RefNumToFileNameTest()
        {
            string referenceNumber = "70690BX00000001"; 
            string expected = "70690BX0.000";
            string actual = XmlTools.RefNumToFileName(referenceNumber);
            Assert.AreEqual(expected, actual, "Utilities.XmlTools.RefNumToFileName did not return the expected value.");
        }

        /// <summary>
        ///A test for RefNumToPath (string)
        ///</summary>
        [TestMethod()]
        public void RefNumToPathTest()
        {
            string referenceNumber = "70690BX00000001"; 
            string expected = "\\Archive\\F00\\L01\\";
            string actual = XmlTools.RefNumToPath(referenceNumber);
            Assert.AreEqual(expected, actual, "Utilities.XmlTools.RefNumToPath did not return the expected value.");
        }

        /// <summary>
        ///A test for SaveSortXML (string, bool, string)
        ///</summary>
        [TestMethod(), Ignore]
        public void SaveSortXmlTest()
        {
            XmlTools target = new XmlTools();
            string cXML = null; 
            bool bIncludeCarriageReturns = false; 
            string cSaveFileName = null; 
            bool expected = false;
            bool actual;
            actual = target.SaveSortXml(cXML, bIncludeCarriageReturns, cSaveFileName);
            Assert.AreEqual(expected, actual, "Utilities.XmlTools.SaveSortXML did not return the expected value.");
        }

        /// <summary>
        ///A test for SaveSortXML (string, string, bool)
        ///</summary>
        [TestMethod(), Ignore]
        public void SaveSortXmlTest1()
        {
            XmlTools target = new XmlTools();
            string cXMLFileName = null; 
            string cSaveFileName = null; 
            bool bIncludeCarriageReturns = false; 
            bool expected = false;
            bool actual;
            actual = target.SaveSortXml(cXMLFileName, cSaveFileName, bIncludeCarriageReturns);
            Assert.AreEqual(expected, actual, "Utilities.XmlTools.SaveSortXML did not return the expected value.");
        }

        /// <summary>
        ///A test for SaveSortXML (XmlDocument, bool, string)
        ///</summary>
        [TestMethod()]
        public void SaveSortXmlTest2()
        {
            XmlTools target = new XmlTools();
            XmlDocument xml = null; 
            bool bIncludeCarriageReturns = false; 
            string cSaveFileName = null; 
            bool expected = false;
            bool actual;
            actual = target.SaveSortXml(xml, bIncludeCarriageReturns, cSaveFileName);
            Assert.AreEqual(expected, actual, "Utilities.XmlTools.SaveSortXML did not return the expected value.");
        }

        /// <summary>
        ///A test for Serialize (object)
        ///</summary>
        [TestMethod(), Ignore]
        public void SerializeTest()
        {
            //object obj = new object(); 
            //byte[] expected = new byte[3];
            //byte[] actual = XmlTools.Serialize(obj);
            //CollectionAssert.AreEqual(expected, actual, "Utilities.XmlTools.Serialize did not return the expected value.");
        }

        /// <summary>
        ///A test for SortAndFixPackageXML (string, string)
        ///</summary>
        [TestMethod(), Ignore]
        public void SortAndFixPackageXmlTest()
        {
            XmlTools target = new XmlTools();
            string cFileIn = " "; 
            string cFileOut = " "; 
            bool expected = false;
            bool actual = target.SortAndFixPackageXml(cFileIn, cFileOut);
            Assert.AreEqual(expected, actual, "Utilities.XmlTools.SortAndFixPackageXML did not return the expected value.");
        }

        /// <summary>
        ///A test for SortXML (bool, string)
        ///</summary>
        [TestMethod(), Ignore]
        public void SortXmlTest()
        {
            XmlTools target = new XmlTools();
            bool bIncludeCarriageReturns = false; 
            string cXMLFileName = null; 
            string expected = null;
            string actual = target.SortXml(bIncludeCarriageReturns, cXMLFileName);
            Assert.AreEqual(expected, actual, "Utilities.XmlTools.SortXML did not return the expected value.");
        }

        /// <summary>
        ///A test for SortXML (string)
        ///</summary>
        [TestMethod(), Ignore]
        public void SortXmlTest1()
        {
            XmlTools target = new XmlTools();
            string cXML = " "; 
            Collection<string> expected = new Collection<string>();
            Collection<string> actual = target.SortXml(cXML);
            Assert.AreEqual(expected, actual, "Utilities.XmlTools.SortXML did not return the expected value.");
        }

        /// <summary>
        ///A test for SortXML (string, bool)
        ///</summary>
        [TestMethod(), Ignore]
        public void SortXmlTest2()
        {
            XmlTools target = new XmlTools();
            string cXML = " "; 
            bool bIncludeCarriageReturns = false; 
            string expected = " ";
            string actual = target.SortXml(cXML, bIncludeCarriageReturns);
            Assert.AreEqual(expected, actual, "Utilities.XmlTools.SortXML did not return the expected value.");
        }

        /// <summary>
        ///A test for SortXML (XmlDocument)
        ///</summary>
        [DeploymentItem("Utilities.dll")]
        [TestMethod(), Ignore]
        public void SortXmlTest3()
        {
            XmlTools target = new XmlTools();
            XmlTools_Accessor accessor = new XmlTools_Accessor();
            XmlDocument xmldoc = new XmlDocument();
            Collection<string> expected = new Collection<string>();
            Collection<string> actual = XmlTools_Accessor.SortXml(xmldoc);
            Assert.AreEqual(expected, actual, "Utilities.XmlTools.SortXML did not return the expected value.");
        }

        /// <summary>
        ///A test for SortXMLFile (string, string)
        ///</summary>
        [TestMethod(), Ignore]
        public void SortXmlFileTest()
        {
            XmlTools target = new XmlTools();
            string cFileIn = " "; 
            string cFileOut = " "; 
            bool expected = false;
            bool actual = target.SortXmlFile(cFileIn, cFileOut);
            Assert.AreEqual(expected, actual, "Utilities.XmlTools.SortXMLFile did not return the expected value.");
        }

        /// <summary>
        ///A test for SortXMLList (string)
        ///</summary>
        [TestMethod(), Ignore]
        public void SortXmlListTest()
        {
            XmlTools target = new XmlTools();
            string cXML = " "; 
            Collection<string> expected = new Collection<string>();
            Collection<string> actual = target.SortXmlList(cXML);
            Assert.AreEqual(expected, actual, "Utilities.XmlTools.SortXMLList did not return the expected value.");
        }

        /// <summary>
        ///A test for SortXMLList (XmlDocument)
        ///</summary>
        [DeploymentItem("Utilities.dll")]
        [TestMethod(), Ignore]
        public void SortXmlListTest1()
        {
            XmlTools target = new XmlTools();
            XmlTools_Accessor accessor = new XmlTools_Accessor();
            XmlDocument xmldoc = new XmlDocument(); 
            Collection<string> expected = new Collection<string>();
            Collection<string> actual = XmlTools_Accessor.SortXmlList(xmldoc);
            Assert.AreEqual(expected, actual, "Utilities.XmlTools.SortXMLList did not return the expected value.");
        }

        /// <summary>
        ///A test for WalkNodes (XmlNode)
        ///</summary>
        [DeploymentItem("Utilities.dll")]
        [TestMethod(), Ignore]
        public void WalkNodesTest()
        {
            //XmlTools target = new XmlTools();
            //Kfd_Tools_XMLToolsAccessor accessor = new Kfd_Tools_XMLToolsAccessor(target);
            //XmlNode n; 
            //ArrayList expected = new ArrayList();
            //ArrayList actual = accessor.WalkNodes(n);
            //Assert.AreEqual(expected, actual, "Utilities.XmlTools.WalkNodes did not return the expected value.");
        }

        /// <summary>
        ///A test for WalkNodesList (XmlNode)
        ///</summary>
        [DeploymentItem("Utilities.dll")]
        [TestMethod(), Ignore]
        public void WalkNodesListTest()
        {
            //XmlTools target = new XmlTools();
            //Kfd_Tools_XMLToolsAccessor accessor = new Kfd_Tools_XMLToolsAccessor(target);
            //XmlNode n = null; 
            //Collection<string> expected = null;
            //Collection<string> actual;
            //actual = accessor.WalkNodesList(n);
            //Assert.AreEqual(expected, actual, "Utilities.XmlTools.WalkNodesList did not return the expected value.");
            //
        }

        /// <summary>
        ///A test for UrlDecode
        ///</summary>
        [TestMethod() ]
        public void UrlDecodeTest()
        {
            string encodedXml = "%3C%3Fxml+version%3D%221.0%22+encoding%3D%22UTF-8%22%3F%3E%3CREQUEST_GROUP+MISMOVersionID%3D%222.3%22%3E";
            string expected = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><REQUEST_GROUP MISMOVersionID=\"2.3\">";
            string actual;
            actual = XmlTools.UrlDecode(encodedXml);
            Assert.AreEqual(expected, actual);
        }


    }
}

