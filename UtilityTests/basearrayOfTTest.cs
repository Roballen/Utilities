// The following code was generated by Microsoft Visual Studio 2005.
// The test owner should check each test for validity.
using Kfd.Tools;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace KfdToolsTests
{
    /// <summary>
    ///This is a test class for Kfd.Tools.BaseArray&lt;T&gt; and is intended
    ///to contain all Kfd.Tools.BaseArray&lt;T&gt; Unit Tests
    ///</summary>
    [TestClass]
    public class BaseArrayOfTTest
    {
        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext { get; set; }

        #region Additional test attributes

        // 
        //You can use the following additional attributes as you write your tests:
        //
        //Use ClassInitialize to run code before running the first test in the class
        //
        //[ClassInitialize()]
        //public static void MyClassInitialize(TestContext testContext)
        //{
        //}
        //
        //Use ClassCleanup to run code after all tests in a class have run
        //
        //[ClassCleanup()]
        //public static void MyClassCleanup()
        //{
        //}
        //
        //Use TestInitialize to run code before running each test
        //
        //[TestInitialize()]
        //public void MyTestInitialize()
        //{
        //}
        //
        //Use TestCleanup to run code after each test has run
        //
        //[TestCleanup()]
        //public void MyTestCleanup()
        //{
        //}
        //

        #endregion

        /// <summary>
        ///A test for Current
        ///</summary>
        [TestMethod]
        public void CurrentTest()
        {
            var target = new BaseArray<string>();
            target.AddRecord("test");
            const string val = "test";
            Assert.AreEqual(val, target.Current, "Kfd.Tools.BaseArray<T>.Current was not set correctly.");
        }

        /// <summary>
        ///A test for DeleteAll ()
        ///</summary>
        [TestMethod]
        public void DeleteAllTest()
        {
            var target = new BaseArray<int>();
            target.AddRecord(1);
            target.AddRecord(2);
            target.AddRecord(3);
            Assert.AreEqual(3, target.Count());
            target.DeleteAll();
            Assert.AreEqual(0, target.Count());
        }

        /// <summary>
        ///A test for DeleteRecord (int)
        ///</summary>
        [TestMethod]
        public void DeleteRecordTest()
        {
            var target = new BaseArray<int>();
            const int nIndex = 0;
            target.AddRecord(1);
            target.AddRecord(2);
            target.AddRecord(3);
            target.DeleteRecord(nIndex);
            Assert.AreEqual(2, target.Count());
            target.SetCurrent(0);
            Assert.AreEqual(2, target.Current);
        }

        /// <summary>
        ///A test for Count ()
        ///</summary>
        [TestMethod]
        public void GetCountTest()
        {
            var target = new BaseArray<int>();
            target.AddRecord(1);
            target.AddRecord(2);
            target.AddRecord(3);
            Assert.AreEqual(3, target.Count());
        }

        /// <summary>
        ///A test for GetEnumerator ()
        ///</summary>
        [TestMethod]
        public void GetEnumeratorTest()
        {
            var target = new BaseArray<int>();
            target.AddRecord(1);
            target.AddRecord(2);
            target.AddRecord(3);
            const int expected = 3;
            int actual = target.Count();
            Assert.AreEqual(expected, actual, "Kfd.Tools.BaseArray<T>.GetEnumerator did not return the expected value.");
        }

        /// <summary>
        ///A test for MoveNext ()
        ///</summary>
        [TestMethod]
        public void MoveNextTest()
        {
            var target = new BaseArray<int>();
            const bool expected = false;
            bool actual = target.MoveNext();
            Assert.AreEqual(expected, actual, "Kfd.Tools.BaseArray<T>.MoveNext did not return the expected value.");
        }

        /// <summary>
        ///A test for Reset ()
        ///</summary>
        [TestMethod]
        public void ResetTest()
        {
            var target = new BaseArray<int>();
            target.Reset();
            Assert.AreEqual(0, target.Count());
        }
    }
}