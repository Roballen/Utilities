// The following code was generated by Microsoft Visual Studio 2005.
// The following code was generated by Microsoft Visual Studio 2005.
// The test owner should check each test for validity.
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.IO;
using Utilities;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace UtilitiesTests
{
    /// <summary>
    ///This is a test class for Utilities.FileTools and is intended
    ///to contain all Utilities.FileTools Unit Tests
    ///</summary>
    [TestClass]
    public class FileToolsTest
    {
        //static string cPath1 = "..\\..\\";
        private static readonly string cPath2 = cPath1 + "TestFiles";
        private const string cPath1 = "\\CSharp\\DEV\\Main\\Common\\Utilities\\Utilities_Tests\\";
        private readonly string cDirectoryName1 = cPath2 + "\\Fhwqhgads";
        private readonly string cFileName1 = cPath2 + "\\FileTest1.txt";
        private readonly string cFileName2 = cPath2 + "\\FileTest2.txt";
        private readonly string cFileName3 = cPath2 + "\\FileTest3.txt";
        private readonly string cFileName4 = cPath2 + "\\FileTest4.txt";
        private readonly string cFileName5 = cPath2 + "\\FileTest5.txt";
        private readonly string cFileName6 = cPath2 + "\\BinOutput.txt";
        // *UPDATE cRootDrive IF FILE LOCATED ELSEWHERE*
/*
        private string cRootDrive = "D:\\";
*/

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext { get; set; }

        #region Additional test attributes

        // 
        //You can use the following additional attributes as you write your tests:
        //
        //Use ClassInitialize to run code before running the first test in the class
        //
        [ClassInitialize]
        public static void MyClassInitialize(TestContext testContext)
        {
            FileTools.SForceDirIfNecessary(cPath1);
        }

        //Use ClassCleanup to run code after all tests in a class have run
        //
        [ClassCleanup]
        public static void MyClassCleanup()
        {
        }

        //Use TestInitialize to run code before running each test
        //
        [TestInitialize]
        public void MyTestInitialize()
        {
            var aList = new Collection<string>();
            FileTools.SWriteFile(cFileName1, "ABC");
            aList.Add("ABC");
            aList.Add("DEF");
            FileTools.SSaveArrayToFile(cFileName2, aList);
            FileTools.SSaveArrayToFile(cFileName3, aList);
            aList.Add("GHI");
            FileTools.SSaveArrayToFile(cFileName4, aList);
        }

        //
        //Use TestCleanup to run code after each test has run
        //
        [TestCleanup]
        public void MyTestCleanup()
        {
            FileTools.SDelFile(cFileName1);
            FileTools.SDelFile(cFileName2);
            FileTools.SDelFile(cFileName3);
            FileTools.SDelFile(cFileName4);
            FileTools.SDelFile(cFileName5);
            FileTools.SDelFile(cFileName6);
            // If a delete directory function is introduced in FileTools, replace this.
            try
            {
                var di = new DirectoryInfo(cDirectoryName1);
                di.Delete();
            }
            catch
            {
            }
        }

        //

        #endregion

        /// <summary>
        ///A test for ~FileTools ()
        ///</summary>
        [TestMethod, Ignore]
        public void FinalizerTest()
        {
            // Unit Test Generation Error: Finalizers and destructors are not called directly from automatic test generation.
            Assert.Fail("Unit Test Generation Error: Finalizers and destructors are not called directly from automatic test generation.");
        }

        /// <summary>
        ///A test for Dispose ()
        ///</summary>
        [TestMethod, Ignore]
        public void DisposeTest()
        {
            var target = new FileTools();
            target.Dispose();
            
        }

        /// <summary>
        ///A test for Dispose (bool)
        ///</summary>
        [DeploymentItem("Utilities.dll")]
        [TestMethod, Ignore]
        public void DisposeTest1()
        {
            var target = new FileTools();
            var accessor = new FileTools_Accessor();
            const bool disposeManagedObjs = false;
            accessor.Dispose(disposeManagedObjs);
            
        }

        /// <summary>
        ///A test for GetCreationTime (string)
        ///</summary>
        [TestMethod, Ignore]
        public void GetCreationTimeTest()
        {
            const string cPath = null;
            const string expected = null;
            string actual = FileTools.GetCreationTime(cPath);
            Assert.AreEqual(expected, actual, "Utilities.FileTools.GetCreationTime did not return the expected value.");
        }

        /// <summary>
        ///A test for JustFName (string)
        ///</summary>
        [TestMethod]
        public void JustFNameTest()
        {
            string cFileName = cFileName1;
            const string expected = "FileTest1.txt";
            string actual = FileTools.JustFName(cFileName);
            Assert.AreEqual(expected, actual, "Utilities.FileTools.JustFName did not return the expected value.");
        }

        /// <summary>
        ///A test for JustPath (string)
        ///</summary>
        [TestMethod]
        public void JustPathTest()
        {
            string cPath = cFileName1;
            string expected = cPath2;
            string actual = FileTools.JustPath(cPath);
            Assert.AreEqual(expected, actual, "Utilities.FileTools.JustPath did not return the expected value.");
        }

        /// <summary>
        ///A test for JustStem (string)
        ///</summary>
        [TestMethod]
        public void JustStemTest()
        {
            string cPath = cFileName1;
            const string expected = "FileTest1";
            string actual = FileTools.JustStem(cPath);
            Assert.AreEqual(expected, actual, "Utilities.FileTools.JustStem did not return the expected value.");
        }

        /// <summary>
        ///A test for MoveFile (string, string)
        ///</summary>
        [TestMethod, Ignore]
        public void MoveFileTest()
        {
            var target = new FileTools();
            const string cSourceFileName = null;
            const string cDestinationFileName = null;
            const bool expected = false;
            bool actual = target.MoveFile(cSourceFileName, cDestinationFileName);
            Assert.AreEqual(expected, actual, "Utilities.FileTools.MoveFile did not return the expected value.");
        }

        /// <summary>
        ///A test for SAppendToFile (string, string)
        ///</summary>
        [TestMethod]
        public void SAppendToFileTest()
        {
            Assert.IsTrue(FileTools.SFileExists(cFileName1), "Test file not created");
            Assert.IsTrue(FileTools.SAppendToFile(cFileName1, "DEF"), "Unable to append data");
            var aTest = new List<string>();
            FileTools.SLoadFileToArray(cFileName1, ref aTest);
            Assert.AreEqual(aTest.Count, 2);
            Assert.AreEqual(aTest[1], "DEF");
        }

        /// <summary>
        ///A test for SCompareFiles (string, string, ref ArrayList)
        ///</summary>
        [TestMethod]
        public void SCompareFilesTest()
        {
            var aList = new ArrayList();
            Assert.IsTrue(FileTools.SCompareFiles(cFileName2, cFileName3, ref aList));
            Assert.IsFalse(FileTools.SCompareFiles(cFileName3, cFileName4, ref aList));
        }

        /// <summary>
        ///A test for SCompareFiles (string, string, ref List&lt;string&gt;)
        ///</summary>
        [TestMethod]
        public void SCompareFilesTest1()
        {
            var aList = new List<string>();
            Assert.IsTrue(FileTools.SCompareFiles(cFileName2, cFileName3, ref aList));
            Assert.IsFalse(FileTools.SCompareFiles(cFileName3, cFileName4, ref aList));
        }

        /// <summary>
        ///A test for SCopyFile (string, string)
        ///</summary>
        [TestMethod]
        public void SCopyFileTest()
        {
            Assert.IsTrue(FileTools.SCopyFile(cFileName1, cFileName5));
            Assert.AreEqual(FileTools.SReadFile(cFileName1), FileTools.SReadFile(cFileName5));
        }

        /// <summary>
        ///A test for SCreateZeroFile (string)
        ///</summary>
        [TestMethod]
        public void SCreateZeroFileTest()
        {
            Assert.IsTrue(FileTools.SCreateZeroFile(cFileName5));
            Assert.IsTrue(FileTools.SFileExists(cFileName5));
        }

        /// <summary>
        ///A test for SDelFile (string)
        ///</summary>
        [TestMethod]
        public void SDelFileTest()
        {
            Assert.IsTrue(FileTools.SFileExists(cFileName1));
            Assert.IsTrue(FileTools.SDelFile(cFileName1));
            Assert.IsFalse(FileTools.SFileExists(cFileName1));
        }

        /// <summary>
        ///A test for SDelFile (string, out string)
        ///</summary>
        [TestMethod, Ignore]
        public void SDelFileTest1()
        {
            const string cFileName = null;
            string cErrorMessage;
            const string cErrorMessage_expected = null;
            const bool expected = false;
            bool actual = FileTools.SDelFile(cFileName, out cErrorMessage);
            Assert.AreEqual(cErrorMessage_expected, cErrorMessage, "cErrorMessage_SDelFile_expected was not set correctly.");
            Assert.AreEqual(expected, actual, "Utilities.FileTools.SDelFile did not return the expected value.");
        }

        /// <summary>
        ///A test for SDirectoryExists (string)
        ///</summary>
        [TestMethod]
        public void SDirectoryExistsTest()
        {
            Assert.IsTrue(FileTools.SDirectoryExists(cPath2));
            Assert.IsFalse(FileTools.SDirectoryExists("allyourbasearebelongtous"));
        }

        /// <summary>
        ///A test for SFileExists (string)
        ///</summary>
        [TestMethod]
        public void SFileExistsTest()
        {
            Assert.IsTrue(FileTools.SFileExists(cFileName1));
        }

        /// <summary>
        ///A test for SFindDirectories (string, string)
        ///</summary>
        [TestMethod]
        public void SFindDirectoriesTest()
        {
            ArrayList aList = FileTools.SFindDirectories(cPath1, "test*");
            Assert.AreEqual(aList.Count, 1);
            aList.Clear();
            aList = FileTools.SFindDirectories(cPath1, "XXX");
            Assert.AreEqual(aList.Count, 0);
        }

        /// <summary>
        ///A test for SFindDirectoriesList (string, string)
        ///</summary>
        [TestMethod]
        public void SFindDirectoriesListTest()
        {
            Collection<string> aList = FileTools.SFindDirectoriesList(cPath1, "test*");
            Assert.AreEqual(aList.Count, 1);
            aList.Clear();
            aList = FileTools.SFindDirectoriesList(cPath1, "XXX");
            Assert.AreEqual(aList.Count, 0);
        }

        /// <summary>
        ///A test for SFindFiles (string, string)
        ///</summary>
        [TestMethod]
        public void SFindFilesTest()
        {
            FileTools.SWriteFile(cFileName1, "ABC");
            ArrayList aList = FileTools.SFindFiles(cPath2, "FileTest1.txt");
            Assert.AreEqual(1, aList.Count);
            aList.Clear();
            aList = FileTools.SFindFiles(cPath2, "FileTest*.*");
            Assert.AreEqual(4, aList.Count);
            aList.Clear();
            aList = FileTools.SFindFiles(cPath2, "XXX*.*");
            Assert.AreEqual(0, aList.Count);
        }

        /// <summary>
        ///A test for SFindFilesList (string, string)
        ///</summary>
        [TestMethod]
        public void SFindFilesListTest()
        {
            FileTools.SWriteFile(cFileName1, "ABC");
            Collection<string> aList = FileTools.SFindFilesList(cPath2, "FileTest1.txt");
            Assert.AreEqual(1, aList.Count);
            aList.Clear();
            aList = FileTools.SFindFilesList(cPath2, "FileTest*.*");
            Assert.AreEqual(4, aList.Count);
            aList.Clear();
            aList = FileTools.SFindFilesList(cPath2, "XXX*.*");
            Assert.AreEqual(0, aList.Count);
        }

        /// <summary>
        ///A test for SForceDirectories (string)
        ///</summary>
        [TestMethod]
        public void SForceDirectoriesTest()
        {
            FileTools.SForceDirectories(cDirectoryName1);
            Assert.IsTrue(FileTools.SDirectoryExists(cDirectoryName1));
        }

        /// <summary>
        ///A test for SForceDirIfNecessary (string)
        ///</summary>
        [TestMethod]
        public void SForceDirIfNecessaryTest()
        {
            FileTools.SForceDirIfNecessary(cDirectoryName1);
            Assert.IsTrue(FileTools.SDirectoryExists(cDirectoryName1));
        }

        /// <summary>
        ///A test for SForceFileCreation (string)
        ///</summary>
        [TestMethod]
        public void SForceFileCreationTest()
        {
            Assert.IsTrue(FileTools.SForceFileCreation(cFileName5));
            Assert.IsTrue(FileTools.SFileExists(cFileName5));
        }

        /// <summary>
        ///A test for SGetDirectory (string)
        ///</summary>
        [TestMethod]
        public void SGetDirectoryTest()
        {
            Assert.AreEqual(cPath2, FileTools.SGetDirectory(cFileName1));
        }

        /// <summary>
        ///A test for SGetFileSize (string)
        ///</summary>
        [TestMethod]
        public void SGetFileSizeTest()
        {
            const long expected = 5;
            Assert.AreEqual(expected, FileTools.SGetFileSize(cFileName1));
        }

        /// <summary>
        ///A test for SGetRootDrive ()
        ///</summary>
        [TestMethod]
        public void SGetRootDriveTest()
        {
            bool err;
            Assert.AreEqual("C:\\", FileTools.SGetRootDrive(out err));
            Assert.IsFalse(err);
        }

        /// <summary>
        ///A test for SGetRootDrive (out bool)
        ///</summary>
        [TestMethod]
        public void SGetRootDriveTest1()
        {
            bool errorOccured;
            const bool errorOccured_expected = false;
            const string expected = "C:\\";
            string actual = FileTools.SGetRootDrive(out errorOccured);
            Assert.AreEqual(errorOccured_expected, errorOccured, "errorOccured_GetRootDrive_expected was not set correctly.");
            Assert.AreEqual(expected, actual, "Utilities.FileTools.GetRootDrive did not return the expected value.");
        }

        /// <summary>
        ///A test for SLoadFileToArray (string, ref ArrayList)
        ///</summary>
        [TestMethod]
        public void SLoadFileToArrayTest()
        {
            var aList = new ArrayList();
            FileTools.SLoadFileToArray(cFileName1, ref aList);
            Assert.AreEqual(1, aList.Count);
            Assert.AreEqual("ABC", aList[0]);
            aList.Clear();
            FileTools.SLoadFileToArray(cFileName2, ref aList);
            Assert.AreEqual(2, aList.Count);
            Assert.AreEqual("ABC", aList[0]);
            Assert.AreEqual("DEF", aList[1]);
        }

        /// <summary>
        ///A test for SLoadFileToArray (string, ref List&lt;string&gt;)
        ///</summary>
        [TestMethod]
        public void SLoadFileToArrayTest1()
        {
            var aList = new List<string>();
            FileTools.SLoadFileToArray(cFileName1, ref aList);
            Assert.AreEqual(1, aList.Count);
            Assert.AreEqual("ABC", aList[0]);
            aList.Clear();
            FileTools.SLoadFileToArray(cFileName2, ref aList);
            Assert.AreEqual(2, aList.Count);
            Assert.AreEqual("ABC", aList[0]);
            Assert.AreEqual("DEF", aList[1]);
        }

        /// <summary>
        ///A test for SReadBinaryFile (string)
        ///</summary>
        [TestMethod]
        public void SReadBinaryFileTest()
        {
            char[] aResult = FileTools.SReadBinaryFile(cFileName1);
            string cResult = "";

            foreach (char c in aResult)
                cResult += c;

            Assert.AreEqual("ABC\r\n", cResult);
        }

        /// <summary>
        ///A test for SReadBinaryFileToBase64 (string)
        ///</summary>
        [TestMethod]
        public void SReadBinaryFileToBase64Test()
        {
            string cResult = FileTools.SReadBinaryFileToBase64(cFileName1);
            Assert.AreEqual("QUJDDQo=", cResult);
        }

        /// <summary>
        ///A test for SReadFile (string)
        ///</summary>
        [TestMethod]
        public void SReadFileTest()
        {
            string cResult = FileTools.SReadFile(cFileName1);
            Assert.AreEqual("ABC\r\n", cResult);
        }

        /// <summary>
        ///A test for SReadFile (string, out string)
        ///</summary>
        [TestMethod]
        public void SReadFileTest1()
        {
            string cOut;
            bool bResult = FileTools.SReadFile(cFileName1, out cOut);
            Assert.AreEqual("ABC\r\n", cOut);
            Assert.AreEqual(true, bResult);
        }

        /// <summary>
        ///A test for SSaveArrayToFile (string, ArrayList)
        ///</summary>
        [TestMethod]
        public void SSaveArrayToFileTest()
        {
            var aList = new ArrayList {"ABC", "DEF"};
            FileTools.SSaveArrayToFile(cFileName5, aList);
            Assert.IsTrue(FileTools.SFileExists(cFileName5));
            aList.Clear();
            FileTools.SLoadFileToArray(cFileName5, ref aList);
            Assert.AreEqual(2, aList.Count);
            Assert.AreEqual("ABC", aList[0]);
            Assert.AreEqual("DEF", aList[1]);
        }

        /// <summary>
        ///A test for SSaveArrayToFile (string, List&lt;string&gt;)
        ///</summary>
        [TestMethod]
        public void SSaveArrayToFileTest1()
        {
            var aList = new Collection<string> {"ABC", "DEF"};
            FileTools.SSaveArrayToFile(cFileName5, aList);
            Assert.IsTrue(FileTools.SFileExists(cFileName5));
            aList.Clear();
            FileTools.SLoadFileToArray(cFileName5, ref aList);
            Assert.AreEqual(2, aList.Count);
            Assert.AreEqual("ABC", aList[0]);
            Assert.AreEqual("DEF", aList[1]);
        }

        /// <summary>
        ///A test for SWriteBase64ToBinaryFile (string, string)
        ///</summary>
        [TestMethod]
        public void SWriteBase64ToBinaryFileTest()
        {
            // Test if it creates properly
            FileTools.SWriteBase64ToBinaryFile(cFileName6, "QUJDDQo=");
            char[] fileArray = FileTools.SReadBinaryFile(cFileName6);
            var fileStr = new string(fileArray);
            Assert.AreEqual("ABC\r\n", fileStr);

            // Ensure that this still behaves correctly if the file already exists already.
            FileTools.SWriteBase64ToBinaryFile(cFileName6, "T29nYUJvb2dh");
            fileArray = FileTools.SReadBinaryFile(cFileName6);
            fileStr = new string(fileArray);
            Assert.AreEqual("OogaBooga", fileStr);
        }

        /// <summary>
        ///A test for SWriteFile (string, string)
        ///</summary>
        [TestMethod]
        public void SWriteFileTest()
        {
            Assert.IsTrue(FileTools.SWriteFile(cFileName5, "ABC"));
            Assert.AreEqual("ABC\r\n", FileTools.SReadFile(cFileName5));
        }

        /// <summary>
        ///A test for SWriteFile (string, string, out string)
        ///</summary>
        [TestMethod, Ignore]
        public void SWriteFileTest1()
        {
            const string cFileName = null;
            const string cText = null;
            string cErrorMessage;
            const string cErrorMessage_expected = null;
            const bool expected = false;
            bool actual = FileTools.SWriteFile(cFileName, cText, out cErrorMessage);
            Assert.AreEqual(cErrorMessage_expected, cErrorMessage, "cErrorMessage_SWriteFile_expected was not set correctly.");
            Assert.AreEqual(expected, actual, "Utilities.FileTools.SWriteFile did not return the expected value.");
        }

        /// <summary>
        ///A test for SMoveFile (string, string)
        ///</summary>
        [TestMethod]
        public void SMoveFileTest()
        {
            FileTools.SForceDirIfNecessary("c:\\test\\");
            FileTools.SCreateZeroFile(@"C:\test\move.test");
            const bool expected = true;
            bool actual = FileTools.SMoveFile(@"C:\test\move.test", @"C:\test\moved.test");
            FileTools.SDelFile(@"C:\test\moved.test");
            Assert.AreEqual(expected, actual, "Utilities.FileTools.SMoveFile did not return the expected value.");
        }
    }
}