// The following code was generated by Microsoft Visual Studio 2005.
// The test owner should check each test for validity.
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Text;
using System.Collections.Generic;
using Kfd.Tools;

namespace KfdToolsTests
{
    /// <summary>
    ///This is a test class for Kfd.Tools.KfdTools and is intended
    ///to contain all Kfd.Tools.KfdTools Unit Tests
    ///</summary>
    [TestClass()]
    public class KfdToolsTest
    {


        private TestContext testContextInstance;

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }
        #region Additional test attributes
        // 
        //You can use the following additional attributes as you write your tests:
        //
        //Use ClassInitialize to run code before running the first test in the class
        //
        //[ClassInitialize()]
        //public static void MyClassInitialize(TestContext testContext)
        //{
        //}
        //
        //Use ClassCleanup to run code after all tests in a class have run
        //
        //[ClassCleanup()]
        //public static void MyClassCleanup()
        //{
        //}
        //
        //Use TestInitialize to run code before running each test
        //
        //[TestInitialize()]
        //public void MyTestInitialize()
        //{
        //}
        //
        //Use TestCleanup to run code after each test has run
        //
        //[TestCleanup()]
        //public void MyTestCleanup()
        //{
        //}
        //
        #endregion


        /// <summary>
        ///A test for FormatPhoneNumber (string, bool)
        ///</summary>
        [TestMethod()]
        public void FormatPhoneNumberTest()
        {
            Assert.AreEqual("123-456-7890", Kfd.Tools.KfdTools.FormatPhoneNumber("1234567890", true));
            Assert.AreEqual("(123)456-7890", Kfd.Tools.KfdTools.FormatPhoneNumber("1234567890", false));

            Assert.AreEqual("123-456-7890", Kfd.Tools.KfdTools.FormatPhoneNumber("(123)456.7890", true));
            Assert.AreEqual("(123)456-7890", Kfd.Tools.KfdTools.FormatPhoneNumber("123 456 7890", false));

            Assert.AreEqual("123-4567", Kfd.Tools.KfdTools.FormatPhoneNumber("1234567", true));
            Assert.AreEqual("123-4567", Kfd.Tools.KfdTools.FormatPhoneNumber("123 4567", true));
        }


        /// <summary>
        ///A test for FormatJrSr (string)
        ///</summary>
        [TestMethod()]
        public void FormatJrSrTest()
        {
            Assert.AreEqual("", Kfd.Tools.KfdTools.FormatJrSr(""));
            Assert.AreEqual("2", Kfd.Tools.KfdTools.FormatJrSr("II"));
            Assert.AreEqual("10", Kfd.Tools.KfdTools.FormatJrSr("X"));
            Assert.AreEqual("Jr", Kfd.Tools.KfdTools.FormatJrSr("JUNIOR"));
        }

        /// <summary>
        ///A test for FormatSSN (string)
        ///</summary>
        [TestMethod()]
        public void FormatSSNTest()
        {
            Assert.AreEqual("123-45-6789", Kfd.Tools.KfdTools.FormatSSN("123-45-6789"));
            Assert.AreEqual("123-45-6789", Kfd.Tools.KfdTools.FormatSSN("123456789"));
        }

        /// <summary>
        ///A test for FormatZip (string)
        ///</summary>
        [TestMethod()]
        public void FormatZipTest()
        {
            Assert.AreEqual("12345", Kfd.Tools.KfdTools.FormatZip("12345"));
            Assert.AreEqual("12345-6789", Kfd.Tools.KfdTools.FormatZip("123456789"));
            Assert.AreEqual("12345-6789", Kfd.Tools.KfdTools.FormatZip("12345-6789"));
        }

        /// <summary>
        ///A test for GetSSNMask (string, char, char)
        ///</summary>
        [TestMethod()]
        public void GetSSNMaskTest()
        {
            string cSSN = "123-45-6789";
            char cMask = 'F'; 
            char report = 'C';
            string expected = "123-45-6789";
            string actual = Kfd.Tools.KfdTools.GetSSNMask(cSSN, cMask, report);
            Assert.AreEqual(expected, actual, "Kfd.Tools.KfdTools.GetSSNMask did not return the expected value.");
        }

        /// <summary>
        ///A test for GetStateLongName (string, ref string)
        ///</summary>
        [TestMethod()]
        public void GetStateLongNameTest()
        {
            string cState = "CO"; 
            string cLongName = ""; 
            string cLongName_expected = "Colorado";
            bool expected = true;
            bool actual = Kfd.Tools.KfdTools.GetStateLongName(cState, ref cLongName);
            Assert.AreEqual(cLongName_expected, cLongName, "cLongName_GetStateLongName_expected was not set correctly.");
            Assert.AreEqual(expected, actual, "Kfd.Tools.KfdTools.GetStateLongName did not return the expected value.");
            cState = "XX";
            actual = Kfd.Tools.KfdTools.GetStateLongName(cState, ref cLongName);
            expected = false;
            Assert.AreEqual(expected, actual, "Kfd.Tools.KfdTools.GetStateLongName did not return the expected value.");

        }
    }


}
namespace KFDTools2008UnitTests
{
    
    
    /// <summary>
    ///This is a test class for KfdToolsTest and is intended
    ///to contain all KfdToolsTest Unit Tests
    ///</summary>
    [TestClass()]
    public class KfdToolsTest
    {


        private TestContext testContextInstance;

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }

        #region Additional test attributes
        // 
        //You can use the following additional attributes as you write your tests:
        //
        //Use ClassInitialize to run code before running the first test in the class
        //[ClassInitialize()]
        //public static void MyClassInitialize(TestContext testContext)
        //{
        //}
        //
        //Use ClassCleanup to run code after all tests in a class have run
        //[ClassCleanup()]
        //public static void MyClassCleanup()
        //{
        //}
        //
        //Use TestInitialize to run code before running each test
        //[TestInitialize()]
        //public void MyTestInitialize()
        //{
        //}
        //
        //Use TestCleanup to run code after each test has run
        //[TestCleanup()]
        //public void MyTestCleanup()
        //{
        //}
        //
        #endregion


        /// <summary>
        ///A test for ShortSsn
        ///</summary>
        [TestMethod()]
        public void ShortSsnTest()
        {
            string cSsn = "123-45-6789";
            string expected = "123456789";
            string actual;
            actual = KfdTools.ShortSsn(cSsn);
            Assert.AreEqual(expected, actual);
        }

        /// <summary>
        ///A test for LargeSsn
        ///</summary>
        [TestMethod()]
        public void LargeSsnTest()
        {
            string cSsn = "123456789";
            string expected = "123-45-6789";
            string actual;
            actual = KfdTools.LargeSsn(cSsn);
            Assert.AreEqual(expected, actual);
        }
    }
}
