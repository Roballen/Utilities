// The following code was generated by Microsoft Visual Studio 2005.
// The test owner should check each test for validity.
using Utilities;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace UtilitiesTests
{
    /// <summary>
    ///This is a test class for Utilities.Validator and is intended
    ///to contain all Utilities.Validator Unit Tests
    ///</summary>
    [TestClass()]
    public class ValidatorTest
    {


        private TestContext testContextInstance;

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }
        #region Additional test attributes
        // 
        //You can use the following additional attributes as you write your tests:
        //
        //Use ClassInitialize to run code before running the first test in the class
        //
        //[ClassInitialize()]
        //public static void MyClassInitialize(TestContext testContext)
        //{
        //}
        //
        //Use ClassCleanup to run code after all tests in a class have run
        //
        //[ClassCleanup()]
        //public static void MyClassCleanup()
        //{
        //}
        //
        //Use TestInitialize to run code before running each test
        //
        //[TestInitialize()]
        //public void MyTestInitialize()
        //{
        //}
        //
        //Use TestCleanup to run code after each test has run
        //
        //[TestCleanup()]
        //public void MyTestCleanup()
        //{
        //}
        //
        #endregion


        /// <summary>
        ///A test for AlphaNumeric (string)
        ///</summary>
        [TestMethod()]
        public void AlphaNumericTest()
        {
            Assert.IsFalse(Validator.AlphaNumeric(null));
            Assert.IsTrue(Validator.AlphaNumeric("abc123"));
            Assert.IsTrue(Validator.AlphaNumeric(""));
            Assert.IsFalse(Validator.AlphaNumeric("abc123%"));
        }

        /// <summary>
        ///A test for CSharpReservedWord (string)
        ///</summary>
        [TestMethod()]
        public void CSharpReservedWordTest()
        {
            Assert.IsFalse(Validator.CSharpReservedWord(null));
            Assert.IsFalse(Validator.CSharpReservedWord("All your"));
            Assert.IsTrue(Validator.CSharpReservedWord("base"));
            Assert.IsFalse(Validator.CSharpReservedWord("basee"));
            Assert.IsFalse(Validator.CSharpReservedWord(""));
        }

        /// <summary>
        ///A test for DomainName (string)
        ///</summary>
        [TestMethod()]
        public void DomainNameTest()
        {
            Assert.IsFalse(Validator.DomainName(null));
            Assert.IsTrue(Validator.DomainName("kroll.com"));
            Assert.IsTrue(Validator.DomainName("abc-d.123"));
            Assert.IsFalse(Validator.DomainName(".kroll.com"));
            Assert.IsFalse(Validator.DomainName("kroll.com."));
            Assert.IsFalse(Validator.DomainName("-kroll.com"));
            Assert.IsFalse(Validator.DomainName("kroll.com-"));
            Assert.IsFalse(Validator.DomainName("kroll"));
            Assert.IsFalse(Validator.DomainName("164.104.1.27"));
        }

        /// <summary>
        ///A test for EMailAddress (string)
        ///</summary>
        [TestMethod()]
        public void EMailAddressTest()
        {
            Assert.IsFalse(Validator.EMailAddress(null));
            Assert.IsTrue(Validator.EMailAddress("ckao@kroll.com"));
            Assert.IsTrue(Validator.EMailAddress("ckao@[164.104.1.27]"));
            Assert.IsFalse(Validator.EMailAddress("ckaokroll.com"));
            Assert.IsFalse(Validator.EMailAddress("ckao@164.104.1.27"));
        }

        /// <summary>
        ///A test for EMailAddressLocalPart (string)
        ///</summary>
        [TestMethod()]
        public void EMailAddressLocalPartTest()
        {
            Assert.IsFalse(Validator.EMailAddressLocalPart(null));
            Assert.IsTrue(Validator.EMailAddressLocalPart("ckao"));
            Assert.IsTrue(Validator.EMailAddressLocalPart("\"ckao\\@\\ \\blah\""));
            Assert.IsFalse(Validator.EMailAddressLocalPart(""));
            Assert.IsFalse(Validator.EMailAddressLocalPart(".a"));
            Assert.IsFalse(Validator.EMailAddressLocalPart("a."));
            Assert.IsFalse(Validator.EMailAddressLocalPart("a..a"));
            Assert.IsFalse(Validator.EMailAddressLocalPart("z123456789112345678921234567893123456789412345678951234567895123456789612345"));
        }

        /// <summary>
        ///A test for EMailAddressLocalPartNoQuotes (string)
        ///</summary>
        [TestMethod()]
        public void EMailAddressLocalPartNoQuotesTest()
        {
            Assert.IsFalse(Validator.EMailAddressLocalPartNoQuotes(null));
            Assert.IsTrue(Validator.EMailAddressLocalPartNoQuotes("Aa0!#$%&'*+-/=?^_`{|}~.b"));
            Assert.IsFalse(Validator.EMailAddressLocalPartNoQuotes("z123456789112345678921234567893123456789412345678951234567895123456789612345"));
            Assert.IsFalse(Validator.EMailAddressLocalPartNoQuotes(".a"));
            Assert.IsFalse(Validator.EMailAddressLocalPartNoQuotes("a."));
            Assert.IsFalse(Validator.EMailAddressLocalPartNoQuotes("a..a"));
            Assert.IsFalse(Validator.EMailAddressLocalPartNoQuotes(""));
        }

        /// <summary>
        ///A test for EMailAddressLocalPartQuotes (string)
        ///</summary>
        [TestMethod()]
        public void EMailAddressLocalPartQuotesTest()
        {
            Assert.IsFalse(Validator.EMailAddressLocalPartQuotes(null));
            Assert.IsTrue(Validator.EMailAddressLocalPartQuotes("\"a\""));
            Assert.IsTrue(Validator.EMailAddressLocalPartQuotes("\"\\ \\\""));
            Assert.IsFalse(Validator.EMailAddressLocalPartQuotes("\"a\"@a.com"));
            Assert.IsFalse(Validator.EMailAddressLocalPartQuotes(""));
            Assert.IsFalse(Validator.EMailAddressLocalPartQuotes("a"));
            Assert.IsFalse(Validator.EMailAddressLocalPartNoQuotes("\"12345678911234567892123456789312345678941234567895123456789512345678961234\""));
        }

        /// <summary>
        ///A test for IPAddress (string)
        ///</summary>
        [TestMethod()]
        public void IPAddressTest()
        {
            Assert.IsFalse(Validator.IPAddress(null));
            Assert.IsTrue(Validator.IPAddress("164.104.1.27"));
            Assert.IsTrue(Validator.IPAddress("0.0.0.0"));
            Assert.IsTrue(Validator.IPAddress("255.255.255.255")); // GODZILLAGRAM!
            Assert.IsFalse(Validator.IPAddress(""));
            Assert.IsFalse(Validator.IPAddress("256.0.0.0"));
            Assert.IsFalse(Validator.IPAddress("123456789123"));
            Assert.IsFalse(Validator.IPAddress("164a104b1c27"));
        }

        /// <summary>
        ///A test for IsBankruptcy (string)
        ///</summary>
        [TestMethod()]
        public void IsBankruptcyTest()
        {
            string cIn = "ABC"; 
            bool expected = false;
            bool actual;
            actual = Validator.IsBankruptcy(cIn);
            Assert.AreEqual(expected, actual, "Utilities.Validator.IsBankruptcy did not return the expected value.");
        }

        /// <summary>
        ///A test for IsMedical (string)
        ///</summary>
        [TestMethod()]
        public void IsMedicalTest()
        {
            string cIn = "ABC"; 
            bool expected = false;
            bool actual;
            actual = Validator.IsMedical(cIn);
            Assert.AreEqual(expected, actual, "Utilities.Validator.IsMedical did not return the expected value.");
        }

        /// <summary>
        ///A test for IsValidDate (string)
        ///</summary>
        [TestMethod()]
        public void IsValidDateTest()
        {
            string cDate = "08/01/2007"; 
            bool expected = true;
            bool actual;
            actual = Validator.IsValidDate(cDate);
            Assert.AreEqual(expected, actual, "Utilities.Validator.IsValidDate did not return the expected value.");
        }

        /// <summary>
        ///A test for SSNDashes (string)
        ///</summary>
        [TestMethod()]
        public void SsnDashesTest()
        {
            Assert.IsFalse(Validator.SsnDashes(null));
            Assert.IsFalse(Validator.SsnDashes(""));
            Assert.IsFalse(Validator.SsnDashes("123456789"));
            Assert.IsTrue(Validator.SsnDashes("123-45-6789"));
            Assert.IsFalse(Validator.SsnDashes("asd-fg-hjkl"));
            Assert.IsFalse(Validator.SsnDashes("123-45-67890"));
        }

        /// <summary>
        ///A test for SSNNoDashes (string)
        ///</summary>
        [TestMethod()]
        public void SsnNoDashesTest()
        {
            Assert.IsFalse(Validator.SsnNoDashes(null));
            Assert.IsFalse(Validator.SsnNoDashes(""));
            Assert.IsTrue(Validator.SsnNoDashes("123456789"));
            Assert.IsFalse(Validator.SsnNoDashes("123-45-6789"));
            Assert.IsFalse(Validator.SsnNoDashes("asdfghjkl"));
            Assert.IsFalse(Validator.SsnNoDashes("1234567890"));
        }

        /// <summary>
        ///A test for StateCode (string)
        ///</summary>
        [TestMethod()]
        public void StateCodeTest()
        {
            Assert.IsFalse(Validator.StateCode(null));
            Assert.IsFalse(Validator.StateCode(""));
            Assert.IsFalse(Validator.StateCode("Denial"));
            Assert.IsTrue(Validator.StateCode("CO"));
        }

        /// <summary>
        ///A test for Valid_DAT5 (string)
        ///</summary>
        [TestMethod()]
        public void ValidDat5Test()
        {
            string cDate = "08/07"; 
            bool expected = true;
            bool actual;
            actual = Validator.ValidDat5(cDate);
            Assert.AreEqual(expected, actual, "Utilities.Validator.Valid_DAT5 did not return the expected value.");
        }

        /// <summary>
        ///A test for Zip (string)
        ///</summary>
        [TestMethod()]
        public void ZipTest()
        {
            Assert.IsFalse(Validator.Zip(null));
            Assert.IsFalse(Validator.Zip(""));
            Assert.IsFalse(Validator.Zip("hophi;ho"));
            Assert.IsTrue(Validator.Zip("80525-1523"));
            Assert.IsTrue(Validator.Zip("80525"));
            Assert.IsFalse(Validator.Zip("asdfg-hjkl"));
        }

        /// <summary>
        ///A test for Zip4 (string)
        ///</summary>
        [TestMethod()]
        public void Zip4Test()
        {
            Assert.IsFalse(Validator.Zip4(null));
            Assert.IsFalse(Validator.Zip4(""));
            Assert.IsFalse(Validator.Zip4("Vescere bracis meis."));
            Assert.IsTrue(Validator.Zip4("80525-1523"));
            Assert.IsFalse(Validator.Zip4("80525"));
            Assert.IsFalse(Validator.Zip4("asdfg-hjkl"));
        }

        /// <summary>
        ///A test for ZipStandard (string)
        ///</summary>
        [TestMethod()]
        public void ZipStandardTest()
        {
            Assert.IsFalse(Validator.ZipStandard(null));
            Assert.IsFalse(Validator.ZipStandard(""));
            Assert.IsFalse(Validator.ZipStandard("Zipcode"));
            Assert.IsFalse(Validator.ZipStandard("80525-1523"));
            Assert.IsTrue(Validator.ZipStandard("80525"));
            Assert.IsFalse(Validator.ZipStandard("asdfg"));
        }
    }
}
