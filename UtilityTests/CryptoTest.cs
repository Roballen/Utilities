// The following code was generated by Microsoft Visual Studio 2005.
// The test owner should check each test for validity.
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace KfdToolsTests
{
    /// <summary>
    ///This is a test class for Kfd.Tools.CCrypto and is intended
    ///to contain all Kfd.Tools.CCrypto Unit Tests
    ///</summary>
    [TestClass]
    public class CryptoTest
    {
        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext { get; set; }

        #region Additional test attributes

        // 
        //You can use the following additional attributes as you write your tests:
        //
        //Use ClassInitialize to run code before running the first test in the class
        //
        //[ClassInitialize()]
        //public static void MyClassInitialize(TestContext testContext)
        //{
        //}
        //
        //Use ClassCleanup to run code after all tests in a class have run
        //
        //[ClassCleanup()]
        //public static void MyClassCleanup()
        //{
        //}
        //
        //Use TestInitialize to run code before running each test
        //
        //[TestInitialize()]
        //public void MyTestInitialize()
        //{
        //}
        //
        //Use TestCleanup to run code after each test has run
        //
        //[TestCleanup()]
        //public void MyTestCleanup()
        //{
        //}
        //

        #endregion

        /// <summary>
        ///A test for BDecode (byte[])
        ///</summary>
        [TestMethod]
        public void BDecodeTest()
        {
            object target = Kfd_Tools_CCryptoAccessor.CreatePrivate();
            var accessor = new Kfd_Tools_CCryptoAccessor(target);
            byte[] sIn = {63, 64, 65};
            const string expected = "¨1õ";
            string actual = accessor.BDecode(sIn);
            Assert.AreEqual(expected, actual, "Kfd.Tools.CCrypto.BDecode did not return the expected value.");
        }

        /// <summary>
        ///A test for BEncode (string)
        ///</summary>
        [TestMethod]
        public void BEncodeTest()
        {
            object target = Kfd_Tools_CCryptoAccessor.CreatePrivate();
            var accessor = new Kfd_Tools_CCryptoAccessor(target);
            const string cIn = "¨1õ";
            byte[] expected = {63, 64, 65};
            byte[] actual = accessor.BEncode(cIn);
            CollectionAssert.AreEqual(expected, actual, "Kfd.Tools.CCrypto.BEncode did not return the expected value.");
        }

        /// <summary>
        ///A test for Decode (string)
        ///</summary>
        [TestMethod]
        public void DecodeTest()
        {
            object target = Kfd_Tools_CCryptoAccessor.CreatePrivate();
            var accessor = new Kfd_Tools_CCryptoAccessor(target);
            const string cIn = "ABC";
            const string expected = "õÝá";
            string actual = accessor.Decode(cIn);
            Assert.AreEqual(expected, actual, "Kfd.Tools.CCrypto.Decode did not return the expected value.");
        }

        /// <summary>
        ///A test for Encode (string)
        ///</summary>
        [TestMethod]
        public void EncodeTest()
        {
            object target = Kfd_Tools_CCryptoAccessor.CreatePrivate();
            var accessor = new Kfd_Tools_CCryptoAccessor(target);
            const string cIn = "õÝá";
            const string expected = "ABC";
            string actual = accessor.Encode(cIn);
            Assert.AreEqual(expected, actual, "Kfd.Tools.CCrypto.Encode did not return the expected value.");
        }

        /// <summary>
        ///A test for SDecode (sbyte[])
        ///</summary>
        [TestMethod]
        public void SDecodeTest()
        {
            object target = Kfd_Tools_CCryptoAccessor.CreatePrivate();
            var accessor = new Kfd_Tools_CCryptoAccessor(target);
            sbyte[] sIn = {64, 65, 66};
            const string expected = "1õÝ";
            string actual = accessor.SDecode(sIn);
            Assert.AreEqual(expected, actual, "Kfd.Tools.CCrypto.SDecode did not return the expected value.");
        }

        /// <summary>
        ///A test for SEncode (string)
        ///</summary>
        [TestMethod]
        public void SEncodeTest()
        {
            object target = Kfd_Tools_CCryptoAccessor.CreatePrivate();
            var accessor = new Kfd_Tools_CCryptoAccessor(target);
            const string cIn = "1õÝ";
            sbyte[] expected = {64, 65, 66};
            sbyte[] actual = accessor.SEncode(cIn);
            CollectionAssert.AreEqual(expected, actual, "Kfd.Tools.CCrypto.SEncode did not return the expected value.");
        }
    }
}